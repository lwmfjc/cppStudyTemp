#ifndef PERSON_H
#define PERSON_H

#include <iostream>
#include <string>
#include <string_view>

class Person
{
  // 重载<<运算符,且<<为友元函数，使之可以访问private成员
  friend std::ostream &operator<<(std::ostream &out, const Person &person);

public:
  Person();
  Person(std::string_view fullname, int age,
         std::string_view address);
  ~Person();

  void do_something() const;
  // 限制类的成员函数不能对成员变量进行修改
  std::string get_full_name() const
  {
    return m_full_name;
  }
  std::string get_address() const
  {
    return m_address;
  }
  int get_age() const
  {
    return m_age;
  }

  int add(int a, int b) const
  {
    return a + b;
  }
  int add(int a, int b, int c) const
  {
    return a + b + c;
  }

public:
  std::string m_full_name{"None"};

protected:
  int m_age{0};

private:
  std::string m_address{"None"};
};

#endif