#include <iostream>
#include <type_traits>
#include <concepts>

// Syntax1
template <typename T>
concept MyIntegral = std::is_integral_v<T>;

template <typename T>
  requires MyIntegral<T>
T add(T a, T b)
{
  return a + b;
}

template <typename T>
concept Multipliable = requires(T a, T b) {
  a *b;
};
template <typename T>
  requires Multipliable<T>
T multi(T a, T b)
{
  return a * b;
}

template <typename T>
concept Incrementable = requires(T a) {
  a += 1;
  ++a;
  a++;
};

template <typename T>
  requires Incrementable<T>
T incre(T a, T b)
{
  //检测语法
  return a * b;
}

/* MyIntegral auto add(MyIntegral auto a, MyIntegral auto b)
{
  return a + b;
} */

int main()
{
  double x{6};
  double y{7};
  // std::string x{"a"};
  // std::string y{"b"};
  std::cout << incre(x, y) << std::endl;
  return 0;
}