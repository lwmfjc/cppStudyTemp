#include <iostream> 
#include <concepts>
//Syntax1
template <typename T>
//int,long,char都行
requires std::integral<T>
T add(T a, T b)
{
  return a + b;
}

//Syntax2
/* template <std::integral T> 
T add(T a, T b)
{
  return a + b;
} */

//Syntax3
/* auto add (std::integral auto  a,std::integral auto  b){
  return a+b;
} */


//Syntax4
/* template <typename T> 
T add(T a, T b) requires std::integral<T>
{
  return a + b;
} */

//int,long,char都行 
/* template <std::integral T>
T add1(T a, T b)
{
  return a + b;
} */

int main()
{
  int a{3};
  int b{4};
  auto result = add(a, b);
  std::cout << result << std::endl;
  long a1{3};
  long b1{4};
  auto result1 = add(a1, b1);
  std::cout << result1 << std::endl;
  double a2{3};
  double b2{4};
/*   auto result2 = add(a2, b2);
  std::cout << result2 << std::endl; */
  return result;
}