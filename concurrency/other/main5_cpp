#include <iostream>
#include <thread>
#include <vector>

static int shared_value = 0;

void shared_value_increment()
{
  //shared_value加1000
  for (int i = 0; i < 1000; i++)
    shared_value++;
}

int main()
{
  std::cout << "========" << std::endl;
  std::vector<std::thread> threads;
  for (int i = 0; i < 2; i++)
  {
    threads.push_back(std::thread(shared_value_increment));
  }
  for (int i = 0; i < 2; i++)
  {
    threads[i].join();
  }
  std::cout << "Shared value: " << shared_value << std::endl;

  // Blocks the current thread until the thread identified by *this finishes its execution.
  // 阻止当前线程直到 *通过*识别的线程完成执行。
  // myThread.join();
  std::cout << "hello from my main thread" << std::endl;
  return 0;
}